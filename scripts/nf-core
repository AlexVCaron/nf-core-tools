#!/usr/bin/env python
""" nf-core: Helper tools for use with nf-core Nextflow pipelines. """

from __future__ import print_function

import click
import sys
import os

import nf_core
import nf_core.lint, nf_core.release

import logging

@click.group()
@click.version_option(nf_core.__version__)
@click.option(
    '-v', '--verbose',
    is_flag = True,
    help = "Verbose output (print debug statements)"
)
def nf_core_cli(verbose):
    if verbose:
        logging.basicConfig(level=logging.DEBUG, format="\n%(levelname)s: %(message)s")
    else:
        logging.basicConfig(level=logging.INFO, format="\n%(levelname)s: %(message)s")

@nf_core_cli.command()
@click.argument(
    'pipeline_dir',
    type = click.Path(exists=True),
    required = True,
    metavar = "<pipeline directory>"
)
@click.option(
    '--release',
    is_flag = True,
    default = os.environ.get('TRAVIS_BRANCH') == 'master',
    help = "Execute additional checks for release-ready workflows."
)
def lint(pipeline_dir, release):
    """ Check pipeline against nf-core guidelines """

    # Run the lint tests!
    nf_core.lint.run_linting(pipeline_dir, release)

@nf_core_cli.command()
@click.argument(
    'pipeline_dir',
    type = click.Path(exists=True),
    required = True,
    metavar = "<pipeline directory>"
)
@click.option(
    '--version',
    required = True,
    help = "New version number (eg. 1.2, 1.3dev, 1.4.2)"
)
def release(pipeline_dir, version):
    """ Update nf-core pipeline version number """

    # First, lint the pipeline to check everything is in order
    logging.info("Running nf-core lint tests")
    lint_obj = nf_core.lint.run_linting(pipeline_dir, False)

    # Bump the version number in relevant files
    nf_core.release.make_release(lint_obj, version)

if __name__ == '__main__':
    nf_core_cli()
