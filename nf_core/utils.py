#!/usr/bin/env python
"""
Common utility functions for the nf-core python package.
"""

import datetime
import os
import requests     
import subprocess
import tempfile

PARAMETERS_URI_TEMPL = "https://raw.githubusercontent.com/nf-core/{pipeline}/master/parameters.settings.json"


def fetch_parameter_settings_from_github(pipeline):
    """Requests the pipeline parameter settings from Github.

    Args:
        pipeline (str): The nf-core pipeline name.
    
    Returns:
        str: The raw JSON string of the file with the parameter settings.

    Raises:
        LookupError: If for some reason the URI cannot be accessed.
    """
    import requests_cache
    
    target_uri = PARAMETERS_URI_TEMPL.format(pipeline=pipeline)
    try:
        with requests_cache.disabled():
            result = requests.get(target_uri, headers={'Cache-Control': 'no-cache'})
    except (ConnectionError, TimeoutError) as e:
        raise LookupError(e)
    return result.text


def fetch_wf_config(wf_path):
    """Uses Nextflow to retrieve the the configuration variables
    from a Nextflow workflow.

    Args:
        wf_path (str): Nextflow workflow file system path.

    Returns:
        dict: Workflow configuration settings.
    """

    config = dict()
    # Call `nextflow config` and pipe stderr to /dev/null
    try:
        with open(os.devnull, 'w') as devnull:
            nfconfig_raw = subprocess.check_output(['nextflow', 'config', '-flat', wf_path], stderr=devnull)
    except OSError as e:
        if e.errno == os.errno.ENOENT:
            raise AssertionError("It looks like Nextflow is not installed. It is required for most nf-core functions.")
    except subprocess.CalledProcessError as e:
        raise AssertionError("`nextflow config` returned non-zero error code: %s,\n   %s", e.returncode, e.output)
    else:
        for l in nfconfig_raw.splitlines():
            ul = l.decode('utf-8')
            k, v = ul.split(' = ', 1)
            config[k] = v
    return config


def setup_requests_cachedir():
    """Sets up local caching for faster remote HTTP requests.

    Caching directory will be generated by tempfile.gettempdir() under
    a nfcore_cache subdir.
    """
    # Only import it if we need it
    import requests_cache

    cachedir = os.path.join(tempfile.gettempdir(), 'nfcore_cache')
    if not os.path.exists(cachedir):
        os.mkdir(cachedir)
    requests_cache.install_cache(
        os.path.join(cachedir, 'nfcore_cache'),
        expire_after=datetime.timedelta(hours=1),
        backend='sqlite',
    )
    # Make world-writeable so that multi-user installations work
    os.chmod(cachedir, 0o777)
    os.chmod(os.path.join(cachedir, 'nfcore_cache.sqlite'), 0o777)
